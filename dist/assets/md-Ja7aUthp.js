import{b as l,o as i,w as s,g as e,B as t,v as u,x as c,C as o}from"./modules/vue-DcZKNubr.js";import{I as d}from"./slidev/default-DITZbOMS.js";import{u as p,f}from"./slidev/context-DOn3OHKD.js";import"./index-DTPcApfY.js";import"./modules/shiki-BYsr0BdZ.js";const k={__name:"s8.md__slidev_487",setup(m){const{$clicksContext:n,$frontmatter:r}=p();return n.setup(),(h,a)=>(i(),l(d,u(c(o(f)(o(r),486))),{default:s(()=>a[0]||(a[0]=[e("h3",null,"Decorators - Example - Input Validation ✅",-1),e("h1",null,"Decorator Example: Input Validation",-1),e("p",null,[e("strong",null,"Let’s create a decorator for input validation. This decorator will check if the arguments passed to a function meet certain criteria before the function executes.")],-1),e("p",null,[e("strong",null,"Explanation:")],-1),e("ul",null,[e("li",null,[e("code",null,"validate_input_decorator"),t(" is a d"),e("em",null,"ecorator factory"),t(". It takes "),e("code",null,"input_types"),t(" (a dictionary mapping argument names to expected types) as an argument and then returns the actual decorator. This allows you to configure the validation rules per function.")]),e("li",null,[t("The "),e("code",null,"@validate_input_decorator(...)"),t(" syntax is used with a call to the decorator factory, passing in the "),e("code",null,"input_types"),t(" dictionary for each function.")]),e("li",null,[t("The "),e("code",null,"wrapper"),t(" function within the decorator does the type checking based on the "),e("code",null,"input_types"),t(" dictionary. If validation fails, it raises a "),e("code",null,"TypeError"),t(". If it passes, it calls the original function.")])],-1),e("p",null,[e("strong",null,[t("Decorator factories like "),e("code",null,"validate_input_decorator"),t(" make decorators even more flexible and reusable, allowing you to parameterize their behavior!")])],-1)])),_:1},16))}};export{k as default};
