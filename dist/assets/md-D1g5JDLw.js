import{b as r,o as l,w as i,g as e,B as n,v as u,x as p,C as t}from"./modules/vue-DYRo_Lls.js";import{I as d}from"./slidev/default-COya6M-5.js";import{u as m,f as c}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const v={__name:"session-2.md__slidev_610",setup(f){const{$clicksContext:s,$frontmatter:o}=m();return s.setup(),(g,a)=>(l(),r(d,u(p(t(c)(t(o),609))),{default:i(()=>a[0]||(a[0]=[e("h2",null,[e("code",null,"np.expand_dims()"),n(" and "),e("code",null,"np.squeeze()"),n(" Summary âœ…")],-1),e("p",null,[e("strong",null,"Important Considerations for Expanding and Squeezing Dimensions:")],-1),e("p",null,[e("strong",null,"Total Size Must Match:"),n(" Expanding and squeezing do not change the number of elements in the array. They only change how the array is shaped.")],-1),e("p",null,[e("strong",null,"View vs. Copy:"),n(),e("code",null,"np.expand_dims()"),n(" generally returns a view. "),e("code",null,"np.squeeze()"),n(" also usually returns a view. Be aware of potential side effects when modifying these arrays if they are views into the original data (deep vs. shallow copy concepts!).")],-1),e("p",null,"Expanding and squeezing dimensions are valuable tools for manipulating array shapes in NumPy, particularly for broadcasting and data alignment.",-1)])),_:1},16))}};export{v as default};
