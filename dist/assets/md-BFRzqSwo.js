import{b as i,o as l,w as s,g as t,B as e,v as u,x as c,C as o}from"./modules/vue-DcZKNubr.js";import{I as p}from"./slidev/default-DITZbOMS.js";import{u as h,f}from"./slidev/context-DOn3OHKD.js";import"./index-DTPcApfY.js";import"./modules/shiki-BYsr0BdZ.js";const b={__name:"s8.md__slidev_476",setup(g){const{$clicksContext:a,$frontmatter:r}=h();return a.setup(),(m,n)=>(l(),i(p,u(c(o(f)(o(r),475))),{default:s(()=>n[0]||(n[0]=[t("h3",null,"Decorators - Introduction - Function Enhancement ü™Ñ",-1),t("h1",null,"Decorators: Enhancing Functions with Elegance",-1),t("p",null,[t("strong",null,"Decorators are a powerful and elegant feature in Python that allows you to modify or enhance the behavior of functions or methods in a reusable way.")],-1),t("p",null,[t("strong",null,"Analogy: Gift Wrapping üéÅ")],-1),t("p",null,"Think of a decorator like gift wrapping:",-1),t("ul",null,[t("li",null,[t("strong",null,"The original function is the gift itself."),e(" It has its core functionality (what the gift "),t("em",null,"is"),e(").")]),t("li",null,[t("strong",null,"The decorator is like the wrapping paper and ribbon."),e(" It adds extra things "),t("em",null,"around"),e(" the gift - presentation, style, maybe a tag, etc. (enhancements like logging, timing, validation).")]),t("li",null,[t("strong",null,'You "wrap" the gift (function) with the wrapping paper (decorator) to enhance it.'),e(" The gift itself remains the same, but it‚Äôs now presented or enhanced in some way.")])],-1)])),_:1},16))}};export{b as default};
