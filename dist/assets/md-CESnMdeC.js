import{b as r,o as a,w as i,g as e,B as t,v as u,x as c,C as o}from"./modules/vue-DcZKNubr.js";import{I as p}from"./slidev/default-DITZbOMS.js";import{u as m,f as d}from"./slidev/context-DOn3OHKD.js";import"./index-DTPcApfY.js";import"./modules/shiki-BYsr0BdZ.js";const I={__name:"s3.md__slidev_173",setup(f){const{$clicksContext:l,$frontmatter:s}=m();return l.setup(),(h,n)=>(a(),r(p,u(c(o(d)(o(s),172))),{default:i(()=>n[0]||(n[0]=[e("h3",null,"Set Operations: Union & Intersection ⋃ ⋂",-1),e("h1",null,"Set Operations: Union and Intersection",-1),e("p",null,[e("strong",null,"Sets in Python are powerful because they support standard mathematical set operations."),t(" Let’s explore some of the fundamental ones:")],-1),e("p",null,[e("strong",null,"2. Intersection (⋂): Common Elements")],-1),e("ul",null,[e("li",null,[t("The "),e("strong",null,"intersection"),t(" of two sets creates a "),e("em",null,"new"),t(" set containing only the elements that are present in "),e("em",null,"both"),t(" sets.")]),e("li",null,[e("strong",null,"Methods to perform intersection:"),e("ul",null,[e("li",null,[e("strong",null,[e("code",null,"set1.intersection(set2)"),t(":")]),t(" Returns a new set containing the intersection of "),e("code",null,"set1"),t(" and "),e("code",null,"set2"),t(".")]),e("li",null,[e("strong",null,[e("code",null,"set1 & set2"),t(" (using the "),e("code",null,"&"),t(" operator):")]),t(" A more concise way to get the intersection.")]),e("li",null,[e("strong",null,[e("code",null,"set1.intersection_update(set2)"),t(":")]),t(" Modifies "),e("code",null,"set1"),t(" in-place, keeping only the elements that are also present in "),e("code",null,"set2"),t(". In-place operation.")])])])],-1)])),_:1},16))}};export{I as default};
