import{b as i,o as l,w as r,g as t,B as e,v as u,x as c,C as o}from"./modules/vue-DcZKNubr.js";import{I as p}from"./slidev/default-DITZbOMS.js";import{u as d,f as m}from"./slidev/context-DOn3OHKD.js";import"./index-DTPcApfY.js";import"./modules/shiki-BYsr0BdZ.js";const _={__name:"s6.md__slidev_344",setup(g){const{$clicksContext:a,$frontmatter:s}=d();return a.setup(),(f,n)=>(l(),i(p,u(c(o(m)(o(s),343))),{default:r(()=>n[0]||(n[0]=[t("h3",null,"OOP Principles ⚙️",-1),t("h1",null,"OOP Principles: Encapsulation and Abstraction",-1),t("p",null,[t("strong",null,"Encapsulation and Abstraction are two fundamental principles in Object-Oriented Programming that contribute to good code design.")],-1),t("p",null,[t("strong",null,"Benefits of Abstraction:")],-1),t("ul",null,[t("li",null,[t("strong",null,"Simplified Usage:"),e(" Makes objects easier to use and understand, as users don’t get bogged down in unnecessary details.")]),t("li",null,[t("strong",null,"Reduced Complexity:"),e(" Helps manage complexity by allowing you to focus on the essential aspects of an object and its interactions.")]),t("li",null,[t("strong",null,"Flexibility:"),e(" Allows you to change the internal implementation of an object without affecting how users interact with it (as long as the abstract interface remains the same).")])],-1),t("p",null,[t("strong",null,"Encapsulation and Abstraction are key to writing well-structured, robust, and maintainable OOP code. They help manage complexity and promote good design principles.")],-1),t("p",null,[t("strong",null,"Next: We are now transitioning to the second topic of this session: File Handling!"),e(" ➡️")],-1)])),_:1},16))}};export{_ as default};
