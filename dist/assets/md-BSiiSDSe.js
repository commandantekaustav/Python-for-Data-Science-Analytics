import{b as s,o as a,w as i,g as e,B as t,v as c,x as u,C as o}from"./modules/vue-DcZKNubr.js";import{I as p}from"./slidev/default-DITZbOMS.js";import{u as d,f}from"./slidev/context-DOn3OHKD.js";import"./index-DTPcApfY.js";import"./modules/shiki-BYsr0BdZ.js";const N={__name:"s7.md__slidev_391",setup(m){const{$clicksContext:n,$frontmatter:r}=d();return n.setup(),(x,l)=>(a(),s(p,c(u(o(f)(o(r),390))),{default:i(()=>l[0]||(l[0]=[e("h1",null,[t("Handling Specific Exception Types using "),e("code",null,"try-except")],-1),e("p",null,[e("strong",null,[t("Let’s look at practical examples of using "),e("code",null,"try-except"),t(" blocks to handle specific types of exceptions.")])],-1),e("p",null,[e("strong",null,[t("Example 2: Handling "),e("code",null,"FileNotFoundError")])],-1),e("p",null,[e("strong",null,"Explanation:")],-1),e("ul",null,[e("li",null,[t("The "),e("code",null,"read_file_contents"),t(" function tries to open and read a file within a "),e("code",null,"try"),t(" block.")]),e("li",null,[t("If a "),e("code",null,"FileNotFoundError"),t(" occurs (if the file at "),e("code",null,"file_path"),t(" doesn’t exist), the "),e("code",null,"except FileNotFoundError:"),t(" block is executed.")]),e("li",null,[t("We print an informative error message and return "),e("code",null,"None"),t(".")]),e("li",null,[t("If the file is opened successfully, the code proceeds to read the content, and the "),e("code",null,"except"),t(" block is skipped.")])],-1),e("p",null,[e("strong",null,"By handling specific exception types, you can create more targeted and informative error responses in your programs.")],-1),e("p",null,[e("strong",null,"Next: Let’s explore the else and finally blocks in try-except statements for more control! ➡️")],-1)])),_:1},16))}};export{N as default};
