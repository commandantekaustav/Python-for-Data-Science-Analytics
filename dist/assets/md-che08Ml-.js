import{b as r,o as a,w as i,g as e,B as t,v as u,x as c,C as s}from"./modules/vue-DYRo_Lls.js";import{I as m}from"./slidev/default-COya6M-5.js";import{u as d,f as p}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const h={__name:"s3.md__slidev_182",setup(f){const{$clicksContext:o,$frontmatter:l}=d();return o.setup(),(g,n)=>(a(),r(m,u(c(s(p)(s(l),181))),{default:i(()=>n[0]||(n[0]=[e("h2",null,"Session 3 Summary - Core Python Data Structures ✅",-1),e("h1",null,"Session 3 Wrap-up: Mastering Core Data Structures",-1),e("p",null,[e("strong",null,'Congratulations on completing Session 3: "Core Python Data Structures"!'),t(" 🎉")],-1),e("p",null,[e("strong",null,"Let’s quickly summarize the key data structures we’ve explored in this session:")],-1),e("ul",null,[e("li",null,[e("strong",null,"Lists:"),t(" Ordered, mutable sequences. Versatile for storing and manipulating collections of items. "),e("code",null,"[]"),t(" 🗂️")]),e("li",null,[e("strong",null,"Tuples:"),t(" Ordered, "),e("em",null,"immutable"),t(" sequences. For fixed collections, data integrity, and sometimes performance. "),e("code",null,"()"),t(" 📦")]),e("li",null,[e("strong",null,"Dictionaries:"),t(" Unordered collections of key-value pairs. For efficient data lookup and representing mappings. "),e("code",null,"{}"),t(" 🔑")]),e("li",null,[e("strong",null,"Sets:"),t(" Unordered collections of "),e("em",null,"unique"),t(" items. For membership testing, removing duplicates, and set operations. "),e("code",null,"set()"),t(" 🧽")])],-1)])),_:1},16))}};export{h as default};
