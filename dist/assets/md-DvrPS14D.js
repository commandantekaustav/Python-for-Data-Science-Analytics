import{b as i,o as a,w as r,g as e,B as n,v as u,x as d,C as o}from"./modules/vue-DcZKNubr.js";import{I as c}from"./slidev/default-DITZbOMS.js";import{u as m,f as p}from"./slidev/context-DOn3OHKD.js";import"./index-DTPcApfY.js";import"./modules/shiki-BYsr0BdZ.js";const y={__name:"s2.md__slidev_81",setup(g){const{$clicksContext:t,$frontmatter:s}=m();return t.setup(),(f,l)=>(a(),i(c,u(d(o(p)(o(s),80))),{default:r(()=>l[0]||(l[0]=[e("h2",null,"PEP 8: Comments and Docstrings ðŸ’¬",-1),e("h1",null,"PEP 8 Guideline: Comments and Docstrings",-1),e("p",null,[e("strong",null,"How to use a linter (example with VS Code):")],-1),e("ul",null,[e("li",null,[e("strong",null,"If you have the Python extension installed in VS Code, linting is often enabled by default!")]),e("li",null,[e("strong",null,"VS Code will often show warnings or underlines"),n(" in your code editor if it detects PEP 8 violations or potential errors.")]),e("li",null,[e("strong",null,'You can usually see detailed linting messages in the "Problems" panel in VS Code'),n(" (View > Problems, or "),e("code",null,"Ctrl+Shift+M"),n(" / "),e("code",null,"Cmd+Shift+M"),n(").")])],-1),e("p",null,[e("strong",null,"Example: VS Code showing a PEP 8 warning (e.g., line too long):")],-1),e("p",null,[e("em",null,"(Include a screenshot here if possible, showing VS Code with a PEP 8 warning underline or in the Problems panel)")],-1),e("p",null,[e("strong",null,"Key Takeaway:"),n(" Use linters to automatically check your code for PEP 8 violations and style issues. Itâ€™s a crucial part of writing clean and professional Python code!")],-1),e("p",null,[e("strong",null,'Next: Letâ€™s explore automatic code formatting with "Black"!'),n(" âœ¨")],-1)])),_:1},16))}};export{y as default};
