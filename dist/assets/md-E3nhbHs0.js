import{b as a,o as l,w as i,g as e,B as r,v as u,x as p,C as s}from"./modules/vue-DYRo_Lls.js";import{I as c}from"./slidev/default-COya6M-5.js";import{u as m,f as d}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const C={__name:"s8.md__slidev_457",setup(f){const{$clicksContext:o,$frontmatter:t}=m();return o.setup(),(g,n)=>(l(),a(c,u(p(s(d)(s(t),456))),{default:i(()=>n[0]||(n[0]=[e("h3",null,"Generator Expressions - Concise Generators ⚡️",-1),e("h1",null,"Generator Expressions: Creating Generators Concisely",-1),e("p",null,[e("strong",null,"Generator expressions provide an even more compact way to create generator objects, especially for simple generator logic.")],-1),e("p",null,[e("strong",null,"What are Generator Expressions?")],-1),e("ul",null,[e("li",null,[e("strong",null,"Similar to List Comprehensions:"),r(" Generator expressions have a syntax very similar to list comprehensions, but they use parentheses "),e("code",null,"()"),r(" instead of square brackets "),e("code",null,"[]"),r(".")]),e("li",null,[e("strong",null,"Create generators, not lists:"),r(" Unlike list comprehensions which create and return a "),e("em",null,"list"),r(", generator expressions create and return a "),e("em",null,"generator object"),r(".")]),e("li",null,[e("strong",null,"Lazy evaluation (like generator functions):"),r(" Generator expressions also produce values lazily, on demand, and are memory-efficient.")])],-1)])),_:1},16))}};export{C as default};
