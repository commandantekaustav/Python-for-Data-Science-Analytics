import{b as l,o as a,w as u,g as e,B as t,v as i,x as c,C as s}from"./modules/vue-DYRo_Lls.js";import{I as p}from"./slidev/default-COya6M-5.js";import{u as d,f as m}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const b={__name:"s7.md__slidev_403",setup(g){const{$clicksContext:r,$frontmatter:n}=d();return r.setup(),(f,o)=>(a(),l(p,i(c(s(m)(s(n),402))),{default:u(()=>o[0]||(o[0]=[e("h2",null,[t("Assertions - "),e("code",null,"assert"),t(" Statement for Checks âœ…")],-1),e("h1",null,[t("Using "),e("code",null,"assert"),t(" Statements for Internal Checks")],-1),e("p",null,[e("strong",null,[e("code",null,"assert"),t(" statements are a powerful tool in Python for performing internal sanity checks and debugging. They allow you to express conditions that you believe "),e("em",null,"must"),t(" be true at a certain point in your code.")])],-1),e("p",null,[e("strong",null,"Purpose of Assertions:")],-1),e("ul",null,[e("li",null,[e("strong",null,"Verify assumptions:"),t(" Use "),e("code",null,"assert"),t(" to check if your assumptions about the state of your program (variable values, conditions) are actually holding true during execution.")]),e("li",null,[e("strong",null,"Detect logical errors early:"),t(" Assertions help you catch logical errors and unexpected conditions closer to their source, making debugging easier.")])],-1)])),_:1},16))}};export{b as default};
