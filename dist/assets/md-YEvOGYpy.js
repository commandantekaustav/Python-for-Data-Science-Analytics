import{b as t,o as s,w as i,g as l,B as o,v as u,x as c,C as e}from"./modules/vue-DYRo_Lls.js";import{I as p}from"./slidev/default-COya6M-5.js";import{u as g,f as m}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const w={__name:"session-4.md__slidev_666",setup(d){const{$clicksContext:n,$frontmatter:r}=g();return n.setup(),(f,a)=>(s(),t(p,u(c(e(m)(e(r),665))),{default:i(()=>a[0]||(a[0]=[l("h3",null,"Common UFunc Categories: Logical UFuncs ðŸ§ ",-1),l("p",null,[l("strong",null,"NumPy provides Logical UFuncs to perform element-wise logical operations on boolean arrays (or arrays that can be interpreted as boolean).")],-1),l("p",null,[l("strong",null,"Key Logical UFuncs:")],-1),l("ul",null,[l("li",null,[l("strong",null,[l("code",null,"np.logical_and(array1, array2)"),o(":")]),o(" Element-wise logical AND. Operator equivalent: "),l("code",null,"&"),o(" (for boolean arrays).")]),l("li",null,[l("strong",null,[l("code",null,"np.logical_or(array1, array2)"),o(":")]),o(" Element-wise logical OR. Operator equivalent: "),l("code",null,"|"),o(" (for boolean arrays).")]),l("li",null,[l("strong",null,[l("code",null,"np.logical_not(array)"),o(":")]),o(" Element-wise logical NOT (inverts boolean values). Operator equivalent: "),l("code",null,"~"),o(" (for boolean arrays).")]),l("li",null,[l("strong",null,[l("code",null,"np.logical_xor(array1, array2)"),o(":")]),o(" Element-wise logical XOR (exclusive OR).")])],-1),l("p",null,[l("strong",null,"These Logical UFuncs are essential for combining and manipulating boolean conditions and performing logical operations on array data.")],-1)])),_:1},16))}};export{w as default};
