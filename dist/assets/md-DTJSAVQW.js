import{b as o,o as l,w as i,g as e,B as t,v as u,x as m,C as n}from"./modules/vue-DYRo_Lls.js";import{I as p}from"./slidev/default-COya6M-5.js";import{u as f,f as c}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const x={__name:"session-2.md__slidev_604",setup(d){const{$clicksContext:r,$frontmatter:s}=f();return r.setup(),(g,a)=>(l(),o(p,u(m(n(c)(n(s),603))),{default:i(()=>a[0]||(a[0]=[e("h2",null,"Reshaping - Flattening and Raveling Arrays ðŸ“‰",-1),e("p",null,[e("strong",null,"Important Considerations for Flattening and Raveling:")],-1),e("p",null,[e("strong",null,"Total Size Must Match:"),t(" Flattening and raveling preserve all elements, so the total number of elements remains the same.")],-1),e("p",null,[e("strong",null,"View vs. Copy:"),t(),e("code",null,".flatten()"),t(" always returns a copy. "),e("code",null,".ravel()"),t(" generally returns a view (more memory-efficient) but might return a copy in some cases. Be aware of potential side effects when modifying raveled arrays.")],-1),e("p",null,[e("strong",null,"Flattening and raveling are useful for converting multi-dimensional arrays into a simpler 1D format for various processing tasks!")],-1)])),_:1},16))}};export{x as default};
