import{b as a,o as i,w as l,g as e,B as o,v as u,x as c,C as t}from"./modules/vue-DYRo_Lls.js";import{I as m}from"./slidev/default-COya6M-5.js";import{u as p,f as d}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const v={__name:"session-4.md__slidev_685",setup(h){const{$clicksContext:r,$frontmatter:s}=p();return r.setup(),(f,n)=>(i(),a(m,u(c(t(d)(t(s),684))),{default:l(()=>n[0]||(n[0]=[e("h3",null,"Performance Benefits: Why UFuncs are Fast? ðŸš€",-1),e("p",null,[e("strong",null,"One of the most compelling reasons to use NumPy UFuncs is their exceptional performance compared to standard Python loops for numerical computations.")],-1),e("p",null,[e("strong",null,"Why are UFuncs so much faster?")],-1),e("ul",null,[e("li",null,[e("strong",null,"Compiled C Code:"),o(" UFuncs are implemented in highly optimized C code under the hood. This compiled code executes much faster than interpreted Python code, especially for numerical loops.")]),e("li",null,[e("strong",null,"Vectorized Operations:"),o(" UFuncs perform vectorized operations, processing entire arrays or array chunks in a single operation, rather than element by element in a Python loop. This eliminates Python loop overhead.")]),e("li",null,[e("strong",null,"Optimized for NumPy Arrays:"),o(" UFuncs are specifically designed to work with NumPy arrays, leveraging efficient memory access and data handling within NumPyâ€™s array structures.")])],-1),e("p",null,[e("strong",null,"This combination of compiled code and vectorized operations results in significant speed advantages when using UFuncs for numerical tasks in NumPy!")],-1)])),_:1},16))}};export{v as default};
