import{b as o,o as i,w as s,g as l,B as e,v as u,x as d,C as t}from"./modules/vue-DYRo_Lls.js";import{I as c}from"./slidev/default-COya6M-5.js";import{u as f,f as m}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const w={__name:"session-5.md__slidev_697",setup(p){const{$clicksContext:a,$frontmatter:r}=f();return a.setup(),(g,n)=>(i(),o(c,u(d(t(m)(t(r),696))),{default:s(()=>n[0]||(n[0]=[l("h3",null,[e("Reshaping Arrays: Flattening Arrays: "),l("code",null,".flatten()"),e(" and "),l("code",null,".ravel()"),e(" ðŸ“‰")],-1),l("p",null,[l("strong",null,[e("Flattening Arrays to 1D: "),l("code",null,".flatten()"),e(" and "),l("code",null,".ravel()")])],-1),l("p",null,[e("Sometimes you need to convert a multi-dimensional array into a 1-dimensional array. NumPy provides two methods for this: "),l("code",null,".flatten()"),e(" and "),l("code",null,".ravel()"),e(".")],-1),l("p",null,[l("strong",null,"Key Differences & Similarities:")],-1),l("ul",null,[l("li",null,[l("strong",null,[l("code",null,".flatten()"),e(":")]),l("ul",null,[l("li",null,[e("Returns a "),l("strong",null,"copy"),e(" of the original array.")]),l("li",null,[e("Changes to the flattened array "),l("em",null,"do not"),e(" affect the original array.")])])]),l("li",null,[l("strong",null,[l("code",null,".ravel()"),e(":")]),l("ul",null,[l("li",null,[e("Returns a "),l("strong",null,"view"),e(" of the original array, "),l("em",null,"if possible"),e(".")]),l("li",null,[e("Changes to the raveled array "),l("em",null,"may"),e(" affect the original array (if it returns a view, which is common).")])])])],-1),l("p",null,[l("strong",null,[e("Both "),l("code",null,".flatten()"),e(" and "),l("code",null,".ravel()"),e(" achieve the goal of converting an array to 1D, but their behavior regarding memory and modification is different.")])],-1),l("p",null,[l("strong",null,"Letâ€™s see examples of each!")],-1)])),_:1},16))}};export{w as default};
