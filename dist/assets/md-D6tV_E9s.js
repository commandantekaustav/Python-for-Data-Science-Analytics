import{b as r,o as i,w as l,g as e,B as a,v as m,x as u,C as o}from"./modules/vue-DYRo_Lls.js";import{I as h}from"./slidev/default-COya6M-5.js";import{u as p,f as c}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const R={__name:"session-2.md__slidev_598",setup(d){const{$clicksContext:t,$frontmatter:s}=p();return t.setup(),(f,n)=>(i(),r(h,m(u(o(c)(o(s),597))),{default:l(()=>n[0]||(n[0]=[e("h2",null,"NumPy Reshaping - Introduction ðŸ§°",-1),e("h3",null,"Introduction to Array Reshaping",-1),e("p",null,[e("strong",null,"Reshaping is a fundamental operation in NumPy that allows you to change the shape (dimensions) of an array without changing its data. Reshaping is essential for making arrays compatible for operations and for organizing data in different ways.")],-1),e("p",null,[e("strong",null,"What is Array Reshaping?")],-1),e("ul",null,[e("li",null,[e("strong",null,"Changing Dimensions:"),a(" Reshaping modifies the number of dimensions or the size along each dimension of a NumPy array.")]),e("li",null,[e("strong",null,"Data Preservation:"),a(" Reshaping does "),e("em",null,"not"),a(" change the elements of the array itself, only how they are organized and accessed (their shape). The total number of elements remains the same.")]),e("li",null,[e("strong",null,"Creating Views or Copies (Important Note):"),a(" In many cases, "),e("code",null,"reshape()"),a(" creates a "),e("em",null,"view"),a(" of the original array (no data copying for efficiency). However, in some scenarios, it might create a copy. Be mindful of this when modifying reshaped arrays (deep vs. shallow copy concepts are relevant here!).")])],-1)])),_:1},16))}};export{R as default};
