import{b as l,o as s,w as i,g as e,B as a,v as u,x as c,C as t}from"./modules/vue-DYRo_Lls.js";import{I as m}from"./slidev/default-COya6M-5.js";import{u as p,f}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const U={__name:"session-4.md__slidev_680",setup(d){const{$clicksContext:o,$frontmatter:r}=p();return o.setup(),(g,n)=>(s(),l(m,u(c(t(f)(t(r),679))),{default:i(()=>n[0]||(n[0]=[e("h3",null,"UFunc Features: UFunc Methods - Summary âœ…",-1),e("p",null,[e("strong",null,"Summary of UFunc Methods:")],-1),e("ul",null,[e("li",null,[e("strong",null,[e("code",null,".reduce()"),a(":")]),a(' Reduces an array to a single value (or lower dimension) by applying a UFunc cumulatively along a specified axis. Think of it as "aggregating" array elements.')]),e("li",null,[e("strong",null,[e("code",null,".accumulate()"),a(":")]),a(' Generates an array of the same shape (or lower dimension in some cases) containing the cumulative results of a UFunc operation along a specified axis. Think of it as showing the "step-by-step" results of a cumulative operation.')]),e("li",null,[e("strong",null,[e("code",null,".outer()"),a(":")]),a(' Computes the outer product of two arrays, applying a UFunc to all pairs of elements from the two arrays, resulting in a higher-dimensional array. Think of it as creating a "combination table" of UFunc operations between two arrays.')])],-1),e("p",null,[e("strong",null,"These UFunc methods significantly expand the power and flexibility of NumPy UFuncs for efficient array manipulation and aggregation!")],-1),e("p",null,[e("strong",null,[a("Next, we will explore another key feature of UFuncs: the "),e("code",null,"out"),a(" argument!")])],-1)])),_:1},16))}};export{U as default};
