import{b as l,o as u,w as i,g as e,B as o,v as s,x as c,C as t}from"./modules/vue-DcZKNubr.js";import{I as d}from"./slidev/default-DITZbOMS.js";import{u as m,f as p}from"./slidev/context-DOn3OHKD.js";import"./index-DTPcApfY.js";import"./modules/shiki-BYsr0BdZ.js";const b={__name:"s8.md__slidev_475",setup(f){const{$clicksContext:a,$frontmatter:r}=m();return a.setup(),(h,n)=>(u(),l(d,s(c(t(p)(t(r),474))),{default:i(()=>n[0]||(n[0]=[e("h3",null,"Decorators - Introduction - Function Enhancement ðŸª„",-1),e("h1",null,"Decorators: Enhancing Functions with Elegance",-1),e("p",null,[e("strong",null,"Decorators are a powerful and elegant feature in Python that allows you to modify or enhance the behavior of functions or methods in a reusable way.")],-1),e("p",null,[e("strong",null,"What are Decorators?")],-1),e("ul",null,[e("li",null,[e("strong",null,'"Wrappers" around functions:'),o(' Decorators are essentially "wrappers" that you can place '),e("em",null,"around"),o(" a function to add extra functionality "),e("em",null,"before"),o(", "),e("em",null,"after"),o(", or "),e("em",null,"around"),o(" the original functionâ€™s execution.")]),e("li",null,[e("strong",null,"Modify function behavior without changing its core:"),o(" Decorators let you augment the behavior of a function without directly modifying its source code. This promotes cleaner, more modular, and reusable code.")]),e("li",null,[e("strong",null,"Reusable enhancement:"),o(" Once you define a decorator, you can apply it to multiple functions to add the same enhancement to all of them, avoiding code duplication.")]),e("li",null,[e("strong",null,[o("Syntax using "),e("code",null,"@"),o(":")]),o(" Python provides a special "),e("code",null,"@"),o(" syntax to apply decorators, making the code very readable and intuitive.")])],-1)])),_:1},16))}};export{b as default};
