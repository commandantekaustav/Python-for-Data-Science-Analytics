import{b as t,o as s,w as u,g as n,B as o,v as i,x as c,C as l}from"./modules/vue-DYRo_Lls.js";import{I as p}from"./slidev/default-COya6M-5.js";import{u as m,f as d}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const h={__name:"session-4.md__slidev_665",setup(g){const{$clicksContext:a,$frontmatter:r}=m();return a.setup(),(f,e)=>(s(),t(p,i(c(l(d)(l(r),664))),{default:u(()=>e[0]||(e[0]=[n("h3",null,"Common UFunc Categories: Comparison UFuncs - Summary ✅",-1),n("p",null,[n("strong",null,"Summary of Comparison UFuncs:")],-1),n("ul",null,[n("li",null,[n("strong",null,"Element-wise Comparisons:"),o(" NumPy provides UFuncs for all standard comparison operations: equal ("),n("code",null,"np.equal()"),o("), not equal ("),n("code",null,"np.not_equal()"),o("), greater than ("),n("code",null,"np.greater()"),o("), greater than or equal ("),n("code",null,"np.greater_equal()"),o("), less than ("),n("code",null,"np.less()"),o("), and less than or equal ("),n("code",null,"np.less_equal()"),o(").")]),n("li",null,[n("strong",null,"Boolean Array Output:"),o(" Comparison UFuncs always return boolean arrays ("),n("code",null,"True"),o(" or "),n("code",null,"False"),o(") as their result.")]),n("li",null,[n("strong",null,"Foundation for Conditional Logic:"),o(" Comparison UFuncs are fundamental for implementing conditional logic and data filtering in NumPy, often used in conjunction with boolean indexing (as we saw in Session 3!).")])],-1),n("p",null,[n("strong",null,"Next, we’ll explore another category of UFuncs: Logical UFuncs!")],-1)])),_:1},16))}};export{h as default};
