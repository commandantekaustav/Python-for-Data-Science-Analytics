import{b as i,o as u,w as d,g as e,B as l,v as c,x as r,C as n}from"./modules/vue-DYRo_Lls.js";import{I as a}from"./slidev/default-COya6M-5.js";import{u as f,f as m}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const N={__name:"s4.md__slidev_200",setup(h){const{$clicksContext:o,$frontmatter:s}=f();return o.setup(),(p,t)=>(u(),i(a,c(r(n(m)(n(s),199))),{default:d(()=>t[0]||(t[0]=[e("h3",null,"Conditional Statements (Nested if) ðŸš¦",-1),e("h1",null,[l("Control Flow: Conditional Statements - Nested "),e("code",null,"if")],-1),e("br",null,null,-1),e("p",null,[e("strong",null,[l("Explanation of Nested "),e("code",null,"if"),l(":")])],-1),e("ol",null,[e("li",null,[e("strong",null,[l("Outer "),e("code",null,"if"),l(":")]),l(" The program first checks if "),e("code",null,"num >= 0"),l(". In this case, itâ€™s true (10 >= 0).")]),e("li",null,[e("strong",null,[l("Outer "),e("code",null,"if"),l(" block executes:")]),l(" Because the outer "),e("code",null,"if"),l(" condition is true, the code block indented under it is executed. This block "),e("em",null,"itself"),l(" contains another conditional statement.")]),e("li",null,[e("strong",null,[l("Nested "),e("code",null,"if"),l(":")]),l(" Inside the outer "),e("code",null,"if"),l(" block, the nested "),e("code",null,"if num == 0"),l(" condition is checked. For "),e("code",null,"num = 10"),l(", this is false (10 is not equal to 0).")]),e("li",null,[e("strong",null,[l("Nested "),e("code",null,"else"),l(" executes:")]),l(" Because the nested "),e("code",null,"if"),l(" condition is false, the nested "),e("code",null,"else"),l(' block is executed, printing "Number is positive".')]),e("li",null,[l("If the outer "),e("code",null,"if"),l(" condition ( "),e("code",null,"num >= 0"),l(" ) had been false (e.g., if "),e("code",null,"num"),l(" was -5), then the outer "),e("code",null,"else"),l(" block would have executed directly, and the nested conditional statement would have been completely skipped.")])],-1)])),_:1},16))}};export{N as default};
