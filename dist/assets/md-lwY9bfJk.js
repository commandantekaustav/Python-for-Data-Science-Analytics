import{b as a,o as i,w as l,g as e,B as t,v as p,x as d,C as o}from"./modules/vue-DYRo_Lls.js";import{I as m}from"./slidev/two-cols-header-Bm3rW2CS.js";import{u as f,f as c}from"./slidev/context-Yz-4lzjv.js";import"./index-Q9xIr-xQ.js";import"./modules/shiki-NVXounY8.js";const C={__name:"s3.md__slidev_171",setup(g){const{$clicksContext:s,$frontmatter:r}=f();return s.setup(),(h,n)=>(i(),a(m,p(d(o(c)(o(r),170))),{left:l(u=>n[0]||(n[0]=[e("p",null,[e("strong",null,"1. Union (⋃): Combining Sets")],-1),e("ul",null,[e("li",null,[t("The "),e("strong",null,"union"),t(" of two sets creates a "),e("em",null,"new"),t(" set containing all elements that are in "),e("em",null,"either"),t(" set (or both). Duplicates are automatically removed in the resulting set because sets only store unique elements.")])],-1)])),right:l(u=>n[1]||(n[1]=[e("ul",null,[e("li",null,[e("strong",null,"Methods to perform union:"),e("ul",null,[e("li",null,[e("strong",null,[e("code",null,"set1.union(set2)"),t(":")]),t(" Returns a new set that is the union of "),e("code",null,"set1"),t(" and "),e("code",null,"set2"),t(".")]),e("li",null,[e("strong",null,[e("code",null,"set1 | set2"),t(" (using the "),e("code",null,"|"),t(" operator):")]),t(" A more concise way to get the union.")]),e("li",null,[e("strong",null,[e("code",null,"set1.update(set2)"),t(":")]),t(" Modifies "),e("code",null,"set1"),t(" in-place by adding all elements from "),e("code",null,"set2"),t(" into "),e("code",null,"set1"),t(". This is an in-place operation and doesn’t return a new set.")])])])],-1)])),default:l(()=>[n[2]||(n[2]=e("h3",null,"Set Operations: Union & Intersection ⋃ ⋂",-1)),n[3]||(n[3]=e("h1",null,"Set Operations: Union and Intersection",-1)),n[4]||(n[4]=e("p",null,[e("strong",null,"Sets in Python are powerful because they support standard mathematical set operations."),t(" Let’s explore some of the fundamental ones:")],-1))]),_:1},16))}};export{C as default};
